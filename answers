/* Q1: Some of the facilities charge a fee to members, but some do not.
Please list the names of the facilities that do. */
SELECT name
FROM `Facilities`
WHERE membercost != 0

/* Q2: How many facilities do not charge a fee to members? */
SELECT COUNT( * )
FROM `Facilities`
WHERE membercost = 0

/* Q3: How can you produce a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost?
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */
SELECT facid,
       name, 
       membercost, 
       monthlymaintenance
FROM `Facilities`
WHERE membercost !=0
AND membercost <= 0.2 * monthlymaintenance

/* Q4: How can you retrieve the details of facilities with ID 1 and 5?
Write the query without using the OR operator. */
SELECT *
FROM `Facilities`
WHERE facid BETWEEN 1 AND 5

/* Q5: How can you produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100? Return the name and monthly maintenance of the facilities
in question. */
SELECT name, 
       monthlymaintenance,
       CASE WHEN monthlymaintenance > 100 THEN 'expensive' 
            ELSE 'cheap' END AS monthly_maintenance_cost_label
FROM `Facilities` 

/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Do not use the LIMIT clause for your solution. */
SELECT surname, firstname
FROM `Members`
WHERE joindate = (SELECT MAX(joindate) FROM `Members` )

/* Q7: How can you produce a list of all members who have used a tennis court?
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */
SELECT DISTINCT CONCAT(m.firstname, ' ', m.surname) AS member_name, 
       f.name AS court_name
FROM `Members` m
JOIN `Bookings` b
ON b.memid = m.memid
JOIN `Facilities` f
ON f.facid = b.facid
WHERE f.name LIKE 'Tennis Court%'
ORDER BY member_name

/* Q8: How can you produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30? Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */
SELECT CONCAT(m.firstname, ' ', m.surname) AS member_name,
       f.name AS facility_name,
       CASE WHEN b.memid = 0 THEN b.slots * f.guestcost
            ELSE b.slots * f.membercost END AS cost
FROM `Bookings` b 
JOIN `Facilities` f
ON f.facid = b.facid
JOIN `Members` m
ON m.memid = b.memid
WHERE b.starttime LIKE '2012-09-14%'
AND CASE WHEN b.memid = 0 THEN b.slots * f.guestcost
         ELSE b.slots * f.membercost END > 30
ORDER BY 3 DESC

/* Q9: This time, produce the same result as in Q8, but using a subquery. */
SELECT CONCAT(firstname, ' ', surname) AS member_name,
       name AS facility_name,
       CASE WHEN memid = 0 THEN slots * guestcost
            ELSE slots * membercost END AS cost
FROM (SELECT f.name, 
             m.surname, 
             m.firstname, 
             b.facid, 
             b.memid, 
             b.slots, 
             f.membercost, 
             f.guestcost
      FROM `Bookings` b 
      JOIN `Facilities` f
      ON f.facid = b.facid
      JOIN `Members` m
      ON m.memid = b.memid
      WHERE b.starttime LIKE '2012-09-14%') s
WHERE CASE WHEN memid = 0 THEN slots * guestcost
           ELSE slots * membercost END > 30
ORDER BY 3 DESC

/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */
SELECT name, SUM(cost) AS renenue
FROM
     (SELECT f.name,
             CASE WHEN b.memid = 0 THEN b.slots * f.guestcost
                  ELSE b.slots * f.membercost END AS cost
      FROM `Facilities` f
      JOIN `Bookings` b
      ON b.facid = f.facid
      JOIN `Members` m
      ON m.memid = b.memid) s
GROUP BY 1
HAVING SUM(COST) < 1000
ORDER BY 2
